// 逻辑结构：
// 线性： 一对一， 树：层次，一对多； 图：多对多；
// 存储结构：
// 上述逻辑结构在计算机里面的实现（数据+关系；


/*时间复杂度：随着问题规模增大，算法的基本操作执行次数增加的规律
大O（）表示的是大于小于，而小o表示的是严格的小于， T（n） = O(f(n))
时间复杂度：
1.找出算法的基本操作
2.统计基本操作随着问题规模变化的变化关系，写出函数T（n）
3.写出时间复杂度f（n）（把T（n）去掉系数， 去掉低幂）
我们一般关心的数是最好情况复杂度， 可以通过对数据的预处理让数据逼近于最好情况；

如何算一个算法的平均时间复杂度？
成功（1 + 2 + 3 + 4....n）/n列举所有的可能性
不成功（n + 1);
总体：((n + 1) / 2) / 2 + (n + 1) / 2;
*/